class Solution {
    public boolean isValid(String s) {
        // Use a stack to keep track of open brackets
        Stack<Character> stack = new Stack<>();
        
        // Iterate through the string
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            
            // If the character is an open bracket, push it onto the stack
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            }
            // If the character is a close bracket
            else {
                // Check if the stack is empty (no matching open bracket)
                if (stack.isEmpty()) {
                    return false;
                }
                // Check if the top of the stack is a matching open bracket
                char top = stack.pop();
                if (c == ')' && top != '(' || c == '}' && top != '{' || c == ']' && top != '[') {
                    return false;
                }
            }
        }
        // If the stack is empty at the end, all brackets have matching open and close brackets
        return stack.isEmpty();
    }
}
