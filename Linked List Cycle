//Brute Force Approach
Time complexity - O(n)
Space Complexity - O(n)

public class Solution {
    public boolean hasCycle(ListNode head) {
        if(head == null) return false;

        HashSet <ListNode> set = new HashSet <>();
        while(head != null){
            
            if(set.contains(head)) return true;

            set.add(head);
            head = head.next;
        }

        return false;
    }
}

//Efficient Approach
This approach is also known as Floyd’s Cycle Detection Algorithm as it uses a two-pointer – a fast pointer and a slow pointer to determine if there exists a cycle in the loop. The slow pointer moves one node ahead at a time, while the fast pointer moves two nodes ahead at a time.
If a loop exists in the linked list, the fast and slow pointers are bound to meet at some point.
Time Complexity - O(n)
Space COmplexity - O(1)

public class Solution {
    public boolean hasCycle(ListNode head) {
        
        if(head == null || head.next == null) return false;

        ListNode slow = head;
        ListNode fast = head;

        while(fast.next != null && fast.next.next != null){
            slow = slow.next;
            fast = fast.next.next;

            if(slow == fast) return true;
        }

        return false;
    }
}
